JWT_SECRET=someawesomesecret JWT_ISSUER=moneyapi.com rackup
puma #for run app with config (like production)
shotgun server.rb # debug (streaming is not work)
200 - all right
201 - pass is uncorrect

# region product
  post '/product_new' do
    if access_available?
      product = Product.create_new(params)
      content_type :json
      status 200
      {'product': product.values, "errors": product.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  get '/products' do
    if access_available?
      products = Product.all
      content_type :json
      status 200
      {'products': products.map { |current| current.values }}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  get '/product' do
    if access_available?
      product = Product.where[id: product_data['id']]
      content_type :json
      status 200
      errors = []
      if product.nil?
        product = []
        errors = ["product is not found"]
      else
        product = product.values
      end
      {'product': product, 'errors': errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  delete '/product_delete' do
    if access_available?
      errors = Product.product_id_validation(product_data['id'])
      if errors.empty?
        Product[:id => product_data['id']].destroy
      end
      content_type :json
      status 200
      {'product': product_data['id'], 'errors': errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

# you can change only name of product now
  post '/product_edit' do
    if access_available?
      product = Product.new(:name => product_data['name'])
      content_type :json
      status 200
      if product.valid?
        Product.where(:id => product_data['id']).update(:name => product_data['name'])
        {'product': product_data['id'], 'errors': []}.to_json
      else
        {'product': product_data['id'], 'errors': product.errors}.to_json
      end
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end
# endregion product

# region plans
  post '/plan_new' do
    if access_available?
      plan = Plan.create_new(params)
      content_type :json
      status 200
      {'plan': plan.values, "errors": plan.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  get '/plans' do
    if access_available?
      errors = Product.product_id_validation(plan_data['product_id'])
      plans = []
      plans = Product[:id => plan_data['product_id']].plans if errors.empty?
      content_type :json
      status 200
      {'plans': plans.map { |plan| plan.values }, "errors": errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  delete '/plan_delete' do
    if access_available?
      errors = Plan.plan_id_validation(plan_data['id'])
      if errors.empty?
        Plan[:id => plan_data['id']].destroy
      end
      content_type :json
      status 200
      {'plan': plan_data['id'], 'errors': errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  post '/plan_edit' do
    if access_available?
      plan = Plan.new(:name => plan_data['name'])
      content_type :json
      status 200
      if plan.valid?
        Plan[:id => plan_data['id']].update(:name => plan_data['name'])
        {'plan': plan_data['id'], 'errors': []}.to_json
      else
        {'plan': plan_data['id'], 'errors': plan.errors}.to_json
      end
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end
# endregion plans

# region runs
  post '/run_new' do
    if access_available?
      run = Run.create_new(params)
      content_type :json
      status 200
      {'run': run.values, "errors": run.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  get '/runs' do
    if access_available?
      errors = Plan.plan_id_validation(run_data['plan_id'])
      runs = []
      runs = Plan[:id => run_data['plan_id']].runs if errors.empty?
      content_type :json
      status 200
      {'runs': runs.map { |plan| plan.values }, "errors": errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  delete '/run_delete' do
    if access_available?
      errors = Run.run_id_validation(run_data['id'])
      if errors.empty?
        Run[:id => run_data['id']].destroy
      end
      content_type :json
      status 200
      {'plan': run_data['id'], 'errors': errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end
# endregion runs

# region result_set
  post '/result_set_new' do
    if access_available?
      result_set = ResultSet.create_new(params)
      content_type :json
      status 200
      {'result_set': result_set.values, "errors": result_set.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  get '/result_sets' do
    if access_available?
      errors = Run.run_id_validation(result_set_data['run_id'])
      result_sets = []
      result_sets = Run[:id => result_set_data['run_id']].result_sets if errors.empty?
      content_type :json
      status 200
      {'result_sets': result_sets.map { |result_set| result_set.values }, "errors": errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end
# endregion result_set

# region result
  post '/result_new' do
    if access_available?
      result = Result.create_new(params)
      content_type :json
      status 200
      {'result': result.values, "errors": result.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

# endregion result

# region status
  post '/status_new' do
    content_type :json
    if access_available?
      status = Status.create_new(status_data)
      status 200
      {'status': status.values, "errors": status.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  get '/statuses' do
    content_type :json
    if access_available?
      status 200
      statuses = Status.all
      {'statuses': statuses.map { |current| current.values }}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end

  post '/status_block' do
    content_type :json
    if access_available?
      status = Status[:id => status_data['id']].block!
      status 200
      {'status': status.values, "errors": status.errors}.to_json
    else
      status 201
      {errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end
# endregion status


  def current_user
    if session[:user]
      session[:user]
    end
  end


  def product_data
    begin
      params['product_data']
    rescue Exception
      error
    end
  end

  def plan_data
    begin
      params['plan_data']
    rescue Exception
      error
    end
  end

  def run_data
    params['run_data']
  end

  def result_set_data
    params['result_set_data']
  end

  def result_data
    params['result_data'] ||= {'message': ''}
  end

  def status_data
    params['status_data']
  end

  def access_available?
    auth_status = false
    if user_data_strong?
      auth_status = auth_success?(user_data)
    end
    !session[:user].nil? || auth_status
  end

  def user_data_strong?
    if params.key?('user_data')
      params['user_data'].key?('email') && params['user_data'].key?('password')
    else
      false
    end
  end


  get '/' do
    login_required
    erb :index
  end

  get '/login' do
    erb :login
  end

  get '/registration' do
    erb :registration
  end

  # region auth
  get '/logout' do
    session[:user] = nil
    redirect '/'
  end

  post '/registration' do
    new_user = User.create_new(user_data)
    begin
      new_user.save if new_user.errors.empty?
    rescue
    end
    if new_user.errors.empty?
      session[:user] = user_data['email']
      status 200
    else
      status 201
      content_type :json
      new_user.errors.to_json
    end
  end

  post '/login' do
    if auth_success?(user_data)
      session[:user] = user_data['email']
      status 200
    else
      status 201
      content_type :json
      {user_data: user_data, errors: 'login or password is uncorrect'}.to_json # used in 'check registration page loading' test
    end
  end
  # endregion auth

  not_found do
    'This is nowhere to be found.'
  end

  error do
    'Sorry there was a nasty error - ' + env['sinatra.error'].message
  end